// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: projects.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (id, created_at, update_at, name, images, ocrData)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, update_at, name, images, ocrdata
`

type CreateProjectParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdateAt  time.Time
	Name      string
	Images    []string
	Ocrdata   pqtype.NullRawMessage
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.ID,
		arg.CreatedAt,
		arg.UpdateAt,
		arg.Name,
		pq.Array(arg.Images),
		arg.Ocrdata,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.Name,
		pq.Array(&i.Images),
		&i.Ocrdata,
	)
	return i, err
}

const deleteProjectByName = `-- name: DeleteProjectByName :exec
DELETE FROM projects WHERE name = $1
`

func (q *Queries) DeleteProjectByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteProjectByName, name)
	return err
}

const getProjects = `-- name: GetProjects :many
SELECT id, created_at, update_at, name, images, ocrdata FROM projects
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdateAt,
			&i.Name,
			pq.Array(&i.Images),
			&i.Ocrdata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
